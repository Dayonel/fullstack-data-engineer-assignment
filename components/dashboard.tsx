"use client";

/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/VALTJU986jR
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
} from "@/components/ui/card";
import {
  Table,
  TableHeader,
  TableRow,
  TableHead,
  TableBody,
  TableCell,
} from "@/components/ui/table";
import { ChartConfig, ChartContainer } from "@/components/ui/chart";

import { Recommendation } from "@/models";
import { EngagementDTO } from "@/types/engagement-dto";
import {
  Label,
  PolarGrid,
  PolarRadiusAxis,
  RadialBar,
  RadialBarChart,
} from "recharts";
import { MetricDTO } from "@/types/metric-dto";
import { RankingDTO } from "@/types/ranking-dto";
import { CourseDTO } from "@/types/course-dto";
import { PaginatedEngagementsDTO } from "@/types/paginated-engagements-dto";
import { getCoreRowModel, useReactTable } from "@tanstack/react-table";
import { DataTablePagination } from "./data-table/data-table-pagination";
import { usePagination } from "@/hooks/usePagination";

export function Dashboard({
  engagements,
  recommendations,
  metric,
  ranking,
}: {
  engagements: PaginatedEngagementsDTO;
  recommendations: Recommendation[];
  metric: MetricDTO;
  ranking: RankingDTO;
}) {
  const chartData = [
    { effectiveness: metric.effectiveness, fill: "hsl(var(--chart-1))" },
  ];
  const chartConfig = {
    effectiveness: {
      label: "Effectiveness",
    },
  } satisfies ChartConfig;

  const { pageIndex, pageSize, setPagination } = usePagination();

  const table = useReactTable({
    data: engagements.items,
    columns: [],
    getCoreRowModel: getCoreRowModel(),
    manualPagination: true,
    rowCount: engagements.total,
    onPaginationChange: setPagination,
    state: {
      pagination: {
        pageIndex,
        pageSize,
      },
    },
  });

  return (
    <div className="flex flex-col h-full max-w-screen-xl px-4 mx-auto">
      <main className="flex-1 grid grid-cols-1 lg:grid-cols-3 gap-6 p-6">
        <Card>
          <CardHeader>
            <CardTitle>Recommendations</CardTitle>
            <CardDescription>
              The number of recommendations given to users and the ratio of used
              recommendations.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid gap-4">
              <div className="flex items-center justify-between">
                <div>Recommendations Given</div>
                <div className="text-2xl font-bold">
                  {recommendations?.length}
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle>Total Engagements</CardTitle>
            <CardDescription>
              The total number of engagements across all users and course types.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="text-5xl font-bold">{engagements?.total}</div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle>Effectiveness</CardTitle>
            <CardDescription>
              The effectiveness of our recommendations
            </CardDescription>
          </CardHeader>
          <CardContent className="flex-1">
            <ChartContainer
              config={chartConfig}
              className="mx-auto aspect-square max-h-[80px]"
            >
              <RadialBarChart
                data={chartData}
                endAngle={(chartData[0].effectiveness * 360) / 100}
                innerRadius={30}
                outerRadius={50}
              >
                <PolarGrid
                  gridType="circle"
                  radialLines={false}
                  stroke="none"
                  className="first:fill-muted last:fill-background"
                  polarRadius={[34, 26]}
                />
                <RadialBar dataKey="effectiveness" background />
                <PolarRadiusAxis tick={false} tickLine={false} axisLine={false}>
                  <Label
                    content={({ viewBox }) => {
                      if (viewBox && "cx" in viewBox && "cy" in viewBox) {
                        return (
                          <text
                            x={viewBox.cx}
                            y={viewBox.cy}
                            textAnchor="middle"
                            dominantBaseline="middle"
                          >
                            <tspan
                              x={(viewBox.cx || 0) + 1}
                              y={(viewBox.cy || 0) + 2}
                              className="fill-foreground text-base font-bold"
                            >
                              {chartData[0].effectiveness.toLocaleString()}%
                            </tspan>
                          </text>
                        );
                      }
                    }}
                  />
                </PolarRadiusAxis>
              </RadialBarChart>
            </ChartContainer>
          </CardContent>
        </Card>

        <Card className="col-span-1 lg:col-span-3">
          <CardHeader>
            <CardTitle>User Engagement</CardTitle>
            <CardDescription>
              Detailed engagement data for each user and course type.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>User Name</TableHead>
                  <TableHead>Course Title</TableHead>
                  <TableHead>Timestamp</TableHead>
                  <TableHead>Time Spent</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {engagements?.items.map((engagement: EngagementDTO) => (
                  <TableRow key={engagement.id}>
                    <TableCell>{engagement.userName}</TableCell>
                    <TableCell>{engagement.courseTitle}</TableCell>
                    <TableCell>{engagement.timestamp}</TableCell>
                    <TableCell>{engagement.timeSpent}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
            <DataTablePagination table={table} />
          </CardContent>
        </Card>

        <Card className="col-span-1 lg:col-span-3">
          <CardHeader>
            <CardTitle>Best courses</CardTitle>
            <CardDescription>Top 3 courses</CardDescription>
          </CardHeader>
          <CardContent>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Course Title</TableHead>
                  <TableHead>Average Time Spent</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {ranking?.bestCourses.map((course: CourseDTO) => (
                  <TableRow key={course._id.toString()}>
                    <TableCell>{course.title}</TableCell>
                    <TableCell>{course.avgTimeSpent}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </CardContent>
        </Card>
        <Card className="col-span-1 lg:col-span-3">
          <CardHeader>
            <CardTitle>Worst courses</CardTitle>
            <CardDescription>Worst 3 courses</CardDescription>
          </CardHeader>
          <CardContent>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Course Title</TableHead>
                  <TableHead>Average Time Spent</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {ranking?.worstCourses.map((course: CourseDTO) => (
                  <TableRow key={course._id.toString()}>
                    <TableCell>{course.title}</TableCell>
                    <TableCell>{course.avgTimeSpent}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </CardContent>
        </Card>
      </main>
    </div>
  );
}
